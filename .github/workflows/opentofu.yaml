name: "OpenTofu"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}

permissions:
  pull-requests: write
  contents: read

env:
  TF_VAR_github_token: "${{ secrets.GITHUB_TOKEN }}"
  TF_VAR_tfstate_access_key: "${{ secrets.TFSTATE_ACCESS_KEY }}"
  TF_VAR_tfstate_secret_key: "${{ secrets.TFSTATE_SECRET_KEY }}"
  CIVO_TOKEN: "${{ secrets.CIVO_TOKEN }}"

jobs:
  opentofu:
    name: 'OpenTofu'
    runs-on: ubuntu-latest

    if: "github.actor != 'Flux'"

    defaults:
      run:
        working-directory: infra

    steps:
    - uses: actions/checkout@v3
    - uses: opentofu/setup-opentofu@v1

    - name: OpenTofu fmt
      id: fmt
      run: tofu fmt -check
      continue-on-error: true

    - name: OpenTofu Init
      id: init
      run: tofu init

    - name: OpenTofu Validate
      id: validate
      run: tofu validate -no-color

    - name: OpenTofu Plan
      id: plan
      run: tofu plan -no-color
      continue-on-error: true

    - name: Comment on PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: OpenTofu Apply
      if: github.event_name != 'pull_request'
      run: tofu apply -auto-approve -input=false
